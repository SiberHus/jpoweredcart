<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	default-autowire="byName"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	<context:property-placeholder location="classpath:application.properties"/>
	
	<task:scheduler id="taskScheduler" pool-size="1"/>
	<task:scheduled-tasks scheduler="taskScheduler">
		<task:scheduled ref="scheduledDataUpdateJob" method="updateData" 
			fixed-rate="${task.dataUpdateJob.fixedRate}" initial-delay="${task.dataUpdateJob.initDelay}"/>
	</task:scheduled-tasks>
	<bean id="scheduledDataUpdateJob" class="com.jpoweredcart.common.system.ScheduledDataUpdateJob" />
	
	<!--
	Available services			Default Service
	==============================================
	dataSource					BoneCPDataSource
	transactionManager			DataSourceTransactionManager
	templateService				SpringWebTemplateService
	settingService				DefaultSettingService (JDBC database)
	emailService				SmtpEmailService (Direct SMTP no queue) for testing purpose only
	downloadFileService			DefaultFileService (file system base)
	mediaFileService			DefaultFileService (file system base)
	mediaService				DefaultMediaService
	
	If you want to override above services, you can define the bean with prefix customer_ following
	by the service name. For example, customer_dataSource, customer_emailService, etc.
	
	You can refer to the default service as well even they are not defined here. They are defined in
	the java configuration classes. 
	-->
	
	<!-- 
		[JMS Email Service]
		Comment out the following code until [/JMS Email Service] if you want to override
		the default email service with JMS
	-->
	<!-- 
	<bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${jms.broker.url}" />
	</bean>
	
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	
	<bean id="broker" class="org.apache.activemq.broker.BrokerService"
		init-method="start" destroy-method="stop">
		<property name="brokerName" value="embeddedBroker" />
		<property name="transportConnectorURIs">
			<list>
				<value>${jms.broker.url}</value>
			</list>
		</property>
		<property name="dataDirectory" value="${jms.broker.dataDir}"/>
		<property name="persistenceAdapter">
			<bean class="org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter">
				<property name="directory" value="${jms.broker.dataDir}/kahadb" />
			</bean>
		</property>
	</bean>
	
	<bean id="custom_emailService" class="com.jpoweredcart.common.service.email.JmsEmailService">
		<property name="queueName" value="${jms.queue.email}" />
		<property name="jmsTemplate" ref="jmsTemplate" />
		<property name="settingService" ref="settingService" />
	</bean>
	
	<bean id="emailMessageListener" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destinationName" value="${jms.queue.email}" />
		<property name="messageListener" ref="custom_emailService" />
	</bean>
	 -->
	<!-- [/JMS Email Service] -->
	
	
</beans>
